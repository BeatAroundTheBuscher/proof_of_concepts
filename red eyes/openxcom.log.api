[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'recolorUnitSprite'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'unitPaperdollOverlay'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'unitRankOverlay'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'selectUnitSprite'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'selectMoveSoundUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'reactionUnitAction'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'reactionUnitReaction'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'tryPsiAttackUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'tryMeleeAttackUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'hitUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'damageUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'damageSpecialUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'healUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'createUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'newTurnUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'returnFromMissionUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'awardExperience'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'visibilityUnit'  in group:  'unit'
[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'statsForNerdsArmor'  in group:  'unit'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'recolorItemSprite'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'selectItemSprite'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'inventorySpriteOverlay'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'handOverlay'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'reactionWeaponAction'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'tryPsiAttackItem'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'tryMeleeAttackItem'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'hitUnitAmmo'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'damageUnitAmmo'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'damageSpecialUnitAmmo'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'createItem'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'newTurnItem'  in group:  'item'
[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'statsForNerdsItem'  in group:  'item'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'psiDefenceBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'meleeDodgeBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'timeRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'energyRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'moraleRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'healthRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'manaRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'stunRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'timeSoldierRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'energySoldierRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'moraleSoldierRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'healthSoldierRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'manaSoldierRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'stunSoldierRecoveryBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'damageBonusBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'meleeBonusBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'accuracyMultiplierBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'meleeMultiplierBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'throwMultiplierBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'closeQuartersMultiplierBonusStats'  in group:  'bonuses'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'skillUseUnit'  in group:  'skill'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'detectUfoFromBase'  in group:  'ufo'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'detectUfoFromCraft'  in group:  'ufo'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'statsForNerdsUfo'  in group:  'ufo'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'statsForNerdsCraft'  in group:  'craft'
[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'applySoldierBonuses'  in group:  'soldier'


[29-12-2024_10-14-27]	[DEBUG]	Available built-in script operations:
Op:    set             OpId:  0x2   + 0x2     Args:  [var int] [int]                         Desc:  arg1 = arg2
Op:    clear           OpId:  0x4   + 0x1     Args:  [var int]                               Desc:  arg1 = 0
Op:    swap            OpId:  0xd   + 0x1     Args:  [var int] [var int]                     Desc:  Swap value of arg1 and arg2
Op:    add             OpId:  0xe   + 0x2     Args:  [var int] [int]                         Desc:  arg1 = arg1 + arg2
Op:    sub             OpId:  0x10  + 0x2     Args:  [var int] [int]                         Desc:  arg1 = arg1 - arg2
Op:    mul             OpId:  0x12  + 0x2     Args:  [var int] [int]                         Desc:  arg1 = arg1 * arg2
Op:    aggregate       OpId:  0x14  + 0x4     Args:  [var int] [int] [int]                   Desc:  arg1 = arg1 + (arg2 * arg3)
Op:    offset          OpId:  0x18  + 0x4     Args:  [var int] [int] [int]                   Desc:  arg1 = (arg1 * arg2) + arg3
Op:    offsetmod       OpId:  0x1c  + 0x8     Args:  [var int] [int] [int] [int]             Desc:  arg1 = ((arg1 * arg2) + arg3) % arg4
Op:    div             OpId:  0x24  + 0x2     Args:  [var int] [int]                         Desc:  arg1 = arg1 / arg2
Op:    mod             OpId:  0x26  + 0x2     Args:  [var int] [int]                         Desc:  arg1 = arg1 % arg2
Op:    muldiv          OpId:  0x28  + 0x4     Args:  [var int] [int] [int]                   Desc:  arg1 = (arg1 * arg2) / arg3
Op:    shl             OpId:  0x2c  + 0x2     Args:  [var int] [int]                         Desc:  Left bit shift of arg1 by arg2
Op:    shr             OpId:  0x2e  + 0x2     Args:  [var int] [int]                         Desc:  Right bit shift of arg1 by arg2
Op:    bit_and         OpId:  0x30  + 0x2     Args:  [var int] [int]                         Desc:  Bit And of arg1 and arg2
Op:    bit_or          OpId:  0x32  + 0x2     Args:  [var int] [int]                         Desc:  Bit Or of arg1 and arg2
Op:    bit_xor         OpId:  0x34  + 0x2     Args:  [var int] [int]                         Desc:  Bit Xor of arg1 and arg2
Op:    bit_not         OpId:  0x36  + 0x1     Args:  [var int]                               Desc:  Bit Not of arg1
Op:    bit_count       OpId:  0x37  + 0x1     Args:  [var int]                               Desc:  Count number of set bits of arg1
Op:    pow             OpId:  0x38  + 0x2     Args:  [var int] [int]                         Desc:  Power of arg1 to arg2
Op:    abs             OpId:  0x3a  + 0x1     Args:  [var int]                               Desc:  Absolute value of arg1
Op:    limit           OpId:  0x3b  + 0x4     Args:  [var int] [int] [int]                   Desc:  Correct value in arg1 that is always between arg2 and arg3
Op:    limit_upper     OpId:  0x3f  + 0x2     Args:  [var int] [int]                         Desc:  Correct value in arg1 that is always lesser than arg2
Op:    limit_lower     OpId:  0x41  + 0x2     Args:  [var int] [int]                         Desc:  Correct value in arg1 that is always greater than arg2
Op:    wavegen_rect    OpId:  0x43  + 0x8     Args:  [var int] [int] [int] [int]             Desc:  Square wave function, arg1 - argument and result, arg2 - period, arg3 - length of square, arg4 - height of square
Op:    wavegen_saw     OpId:  0x4b  + 0x8     Args:  [var int] [int] [int] [int]             Desc:  Saw wave function, arg1 - argument and result, arg2 - period, arg3 - size of saw, arg4 - cap value
Op:    wavegen_tri     OpId:  0x53  + 0x8     Args:  [var int] [int] [int] [int]             Desc:  Triangle wave function, arg1 - argument and result, arg2 - period, arg3 - size of triangle, arg4 - cap value
Op:    get_color       OpId:  0x5b  + 0x2     Args:  [var int] [int]                         Desc:  Get color part to arg1 of pixel color in arg2
Op:    set_color       OpId:  0x5d  + 0x2     Args:  [var int] [int]                         Desc:  Set color part to pixel color in arg1
Op:    get_shade       OpId:  0x5f  + 0x2     Args:  [var int] [int]                         Desc:  Get shade part to arg1 of pixel color in arg2
Op:    set_shade       OpId:  0x61  + 0x2     Args:  [var int] [int]                         Desc:  Set color part to pixel color in arg1
Op:    add_shade       OpId:  0x63  + 0x2     Args:  [var int] [int]                         Desc:  Add value of shade to pixel color in arg1
Total size: 0x6b

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'recolorUnitSprite'  in group:  'unit'

Have global events

Script default implementation:
unit.getRecolor new_pixel; add_burn_shade new_pixel burn shade; return new_pixel;

Script return values:
Name: new_pixel                               var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: anim_frame                                        int      
Name: battle_game                             ptr       BattleGame
Name: blit_collapse                                     int       7
Name: blit_item_big                                     int       11
Name: blit_item_floor                                   int       10
Name: blit_item_lefthand                                int       9
Name: blit_item_righthand                               int       8
Name: blit_large_propulsion_0                           int       16
Name: blit_large_propulsion_1                           int       17
Name: blit_large_propulsion_2                           int       18
Name: blit_large_propulsion_3                           int       19
Name: blit_large_torso_0                                int       12
Name: blit_large_torso_1                                int       13
Name: blit_large_torso_2                                int       14
Name: blit_large_torso_3                                int       15
Name: blit_large_turret                                 int       20
Name: blit_leftarm                                      int       3
Name: blit_legs                                         int       6
Name: blit_part                                         int      
Name: blit_rightarm                                     int       2
Name: blit_torso                                        int       1
Name: burn                                              int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: new_pixel                               var       int      
Name: null                                              null     
Name: old_pixel                               var       int      
Name: rules                                   ptr       RuleMod  
Name: shade                                             int      
Name: unit                                    ptr       BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getBreathExhaleFrame         Args: [ptr BattleUnit] [var int]                        Desc: return animation frame of breath bubbles, -1 means no animation
Name: BattleUnit.getBreathInhaleFrame         Args: [ptr BattleUnit] [var int]                        Desc: return number of frames to next breath animation start, 0 means animation started, -1 no animation
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloorAbove                 Args: [ptr BattleUnit] [var int]                        Desc: check if floor is shown above unit
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              
Name: add_burn_shade                          Args: [var int] [int] [int]                             

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'unitPaperdollOverlay'  in group:  'unit'

Have global events

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: anim_frame                                        int      
Name: battle_game                             ptr       BattleGame
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: overlay                                 ptre      SpriteOverlay
Name: rules                                   ptr       RuleMod  
Name: unit                                    ptr       BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: SpriteOverlay.blit                      Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int]     Desc: Blits a sprite onto the overlay. (sprite x y)
Name: SpriteOverlay.blitCrop                  Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int] [int]Desc: Blits a sprite onto the overlay with a crop. (sprite x y cropX1 cropY1 cropX2 cropY2)
Name: SpriteOverlay.blitShade                 Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int]Desc: Blits and shades a sprite onto the overlay. (sprite x y shade)
Name: SpriteOverlay.blitShadeRecolor          Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int] [int]Desc: Blits, shades, and recolors a sprite onto the overlay. (sprite x y shade color)
Name: SpriteOverlay.drawCirc                  Args: [ptre SpriteOverlay] [int] [int] [int] [int]      Desc: Draws a circle on the overlay. (x y radius color)
Name: SpriteOverlay.drawLine                  Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int]Desc: Draws a line on the overlay. (x1 y1 x2 y2 color)
Name: SpriteOverlay.drawNumber                Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int] [int]Desc: Draws number on the overlay. (number x y width height color)
Name: SpriteOverlay.drawRect                  Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int]Desc: Draws a rectangle on the overlay. (x1 y1 x2 y2 color)
Name: SpriteOverlay.drawText                  Args: [ptre SpriteOverlay] [text] [int] [int] [int] [int] [int]Desc: Draws text on the overlay. (text x y width height color
Name: SpriteOverlay.getHeight                 Args: [ptr SpriteOverlay] [var int]                     Desc: Gets the height of this overlay.
Name: SpriteOverlay.getWidth                  Args: [ptr SpriteOverlay] [var int]                     Desc: Gets the width of this overlay.
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'unitRankOverlay'  in group:  'unit'

Have global events

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: anim_frame                                        int      
Name: battle_game                             ptr       BattleGame
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: overlay                                 ptre      SpriteOverlay
Name: rules                                   ptr       RuleMod  
Name: unit                                    ptr       BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: SpriteOverlay.blit                      Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int]     Desc: Blits a sprite onto the overlay. (sprite x y)
Name: SpriteOverlay.blitCrop                  Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int] [int]Desc: Blits a sprite onto the overlay with a crop. (sprite x y cropX1 cropY1 cropX2 cropY2)
Name: SpriteOverlay.blitShade                 Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int]Desc: Blits and shades a sprite onto the overlay. (sprite x y shade)
Name: SpriteOverlay.blitShadeRecolor          Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int] [int]Desc: Blits, shades, and recolors a sprite onto the overlay. (sprite x y shade color)
Name: SpriteOverlay.drawCirc                  Args: [ptre SpriteOverlay] [int] [int] [int] [int]      Desc: Draws a circle on the overlay. (x y radius color)
Name: SpriteOverlay.drawLine                  Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int]Desc: Draws a line on the overlay. (x1 y1 x2 y2 color)
Name: SpriteOverlay.drawNumber                Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int] [int]Desc: Draws number on the overlay. (number x y width height color)
Name: SpriteOverlay.drawRect                  Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int]Desc: Draws a rectangle on the overlay. (x1 y1 x2 y2 color)
Name: SpriteOverlay.drawText                  Args: [ptre SpriteOverlay] [text] [int] [int] [int] [int] [int]Desc: Draws text on the overlay. (text x y width height color
Name: SpriteOverlay.getHeight                 Args: [ptr SpriteOverlay] [var int]                     Desc: Gets the height of this overlay.
Name: SpriteOverlay.getWidth                  Args: [ptr SpriteOverlay] [var int]                     Desc: Gets the width of this overlay.
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'selectUnitSprite'  in group:  'unit'

Have global events

Script default implementation:
add sprite_index sprite_offset; return sprite_index;

Script return values:
Name: sprite_index                            var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: anim_frame                                        int      
Name: battle_game                             ptr       BattleGame
Name: blit_collapse                                     int       7
Name: blit_large_propulsion_0                           int       16
Name: blit_large_propulsion_1                           int       17
Name: blit_large_propulsion_2                           int       18
Name: blit_large_propulsion_3                           int       19
Name: blit_large_torso_0                                int       12
Name: blit_large_torso_1                                int       13
Name: blit_large_torso_2                                int       14
Name: blit_large_torso_3                                int       15
Name: blit_large_turret                                 int       20
Name: blit_leftarm                                      int       3
Name: blit_legs                                         int       6
Name: blit_part                                         int      
Name: blit_rightarm                                     int       2
Name: blit_torso                                        int       1
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: shade                                             int      
Name: sprite_index                            var       int      
Name: sprite_offset                           var       int      
Name: unit                                    ptr       BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getBreathExhaleFrame         Args: [ptr BattleUnit] [var int]                        Desc: return animation frame of breath bubbles, -1 means no animation
Name: BattleUnit.getBreathInhaleFrame         Args: [ptr BattleUnit] [var int]                        Desc: return number of frames to next breath animation start, 0 means animation started, -1 no animation
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloorAbove                 Args: [ptr BattleUnit] [var int]                        Desc: check if floor is shown above unit
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'selectMoveSoundUnit'  in group:  'unit'

Have global events

Script return values:
Name: sound_index                             var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: base_fly_sound_index                              int      
Name: base_tile_sound_index                             int      
Name: base_tile_sound_offset                            int      
Name: blit_collapse                                     int       7
Name: blit_large_propulsion_0                           int       16
Name: blit_large_propulsion_1                           int       17
Name: blit_large_propulsion_2                           int       18
Name: blit_large_propulsion_3                           int       19
Name: blit_large_torso_0                                int       12
Name: blit_large_torso_1                                int       13
Name: blit_large_torso_2                                int       14
Name: blit_large_torso_3                                int       15
Name: blit_large_turret                                 int       20
Name: blit_leftarm                                      int       3
Name: blit_legs                                         int       6
Name: blit_rightarm                                     int       2
Name: blit_torso                                        int       1
Name: move                                              int      
Name: move_normal                                       int       0
Name: move_run                                          int       1
Name: move_sneak                                        int       3
Name: move_strafe                                       int       2
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: sound_index                             var       int      
Name: tile_sound_index                                  int      
Name: unit                                    ptr       BattleUnit
Name: unit_sound_index                                  int      
Name: walking_phase                                     int      

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getBreathExhaleFrame         Args: [ptr BattleUnit] [var int]                        Desc: return animation frame of breath bubbles, -1 means no animation
Name: BattleUnit.getBreathInhaleFrame         Args: [ptr BattleUnit] [var int]                        Desc: return number of frames to next breath animation start, 0 means animation started, -1 no animation
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloorAbove                 Args: [ptr BattleUnit] [var int]                        Desc: check if floor is shown above unit
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'reactionUnitAction'  in group:  'unit'

Have global events

Script return values:
Name: reaction_chance                         var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: action_target                           ptr       BattleUnit
Name: action_unit                             ptr       BattleUnit
Name: arc_to_action_unit                                int      
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptr       BattleGame
Name: distance                                var       int      
Name: move                                              int      
Name: move_normal                                       int       0
Name: move_run                                          int       1
Name: move_sneak                                        int       3
Name: move_strafe                                       int       2
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: reaction_battle_action                            int      
Name: reaction_chance                         var       int      
Name: reaction_count                                    int      
Name: reaction_unit                           ptr       BattleUnit
Name: reaction_weapon                         ptr       BattleItem
Name: rules                                   ptr       RuleMod  
Name: skill                                   ptr       RuleSkill
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'reactionUnitReaction'  in group:  'unit'

Have global events

Script return values:
Name: reaction_chance                         var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: action_target                           ptr       BattleUnit
Name: action_unit                             ptr       BattleUnit
Name: arc_to_action_unit                                int      
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptr       BattleGame
Name: distance                                var       int      
Name: move                                              int      
Name: move_normal                                       int       0
Name: move_run                                          int       1
Name: move_sneak                                        int       3
Name: move_strafe                                       int       2
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: reaction_battle_action                            int      
Name: reaction_chance                         var       int      
Name: reaction_count                                    int      
Name: reaction_unit                           ptr       BattleUnit
Name: reaction_weapon                         ptr       BattleItem
Name: rules                                   ptr       RuleMod  
Name: skill                                   ptr       RuleSkill
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'tryPsiAttackUnit'  in group:  'unit'

Have global events

Script return values:
Name: psi_attack_success                      var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attack_strength                                   int      
Name: attacker                                ptr       BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptr       BattleGame
Name: defense_strength                                  int      
Name: item                                    ptr       BattleItem
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: psi_attack_success                      var       int      
Name: rules                                   ptr       RuleMod  
Name: skill                                   ptr       RuleSkill
Name: victim                                  ptr       BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'tryMeleeAttackUnit'  in group:  'unit'

Have global events

Script return values:
Name: melee_attack_success                    var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attack_strength                                   int      
Name: attacker                                ptr       BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptr       BattleGame
Name: defense_strength                                  int      
Name: item                                    ptr       BattleItem
Name: melee_attack_success                    var       int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: skill                                   ptr       RuleSkill
Name: victim                                  ptr       BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'hitUnit'  in group:  'unit'

Have global events

Script return values:
Name: power                                   var       int      
Name: part                                    var       int      
Name: side                                    var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attacker                                ptre      BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptre      BattleGame
Name: damaging_item                           ptre      BattleItem
Name: damaging_type                                     int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: orig_power                                        int      
Name: part                                    var       int      
Name: power                                   var       int      
Name: rules                                   ptr       RuleMod  
Name: side                                    var       int      
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptre      BattleUnit
Name: weapon_item                             ptre      BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'damageUnit'  in group:  'unit'

Have global events

Script return values:
Name: to_health                               var       int      
Name: to_armor                                var       int      
Name: to_stun                                 var       int      
Name: to_time                                 var       int      
Name: to_energy                               var       int      
Name: to_morale                               var       int      
Name: to_wound                                var       int      
Name: to_transform                            var       int      
Name: to_mana                                 var       int      
In this script 'return' statement is empty, script returning values are edited directly

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attacker                                ptre      BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptre      BattleGame
Name: currPower                                         int      
Name: damaging_item                           ptre      BattleItem
Name: damaging_type                                     int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: orig_power                                        int      
Name: part                                              int      
Name: rules                                   ptr       RuleMod  
Name: side                                              int      
Name: skill                                   ptr       RuleSkill
Name: to_armor                                var       int      
Name: to_energy                               var       int      
Name: to_health                               var       int      
Name: to_mana                                 var       int      
Name: to_morale                               var       int      
Name: to_stun                                 var       int      
Name: to_time                                 var       int      
Name: to_transform                            var       int      
Name: to_wound                                var       int      
Name: unit                                    ptre      BattleUnit
Name: weapon_item                             ptre      BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'damageSpecialUnit'  in group:  'unit'

Have global events

Script return values:
Name: transform_chance                        var       int      
Name: self_destruct_chance                    var       int      
Name: morale_loss                             var       int      
Name: fire                                    var       int      
In this script 'return' statement is empty, script returning values are edited directly

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attacker                                ptre      BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptre      BattleGame
Name: damaging_item                           ptre      BattleItem
Name: damaging_type                                     int      
Name: fire                                    var       int      
Name: health_damage                                     int      
Name: morale_loss                             var       int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: orig_power                                        int      
Name: part                                              int      
Name: rules                                   ptr       RuleMod  
Name: self_destruct                           var       int      
Name: self_destruct_chance                    var       int      
Name: side                                              int      
Name: skill                                   ptr       RuleSkill
Name: transform                               var       int      
Name: transform_chance                        var       int      
Name: unit                                    ptre      BattleUnit
Name: weapon_item                             ptre      BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'healUnit'  in group:  'unit'

Have global events

Script return values:
Name: medikit_action_type                     var       int      
Name: body_part                               var       int      
Name: wound_recovery                          var       int      
Name: health_recovery                         var       int      
Name: energy_recovery                         var       int      
Name: stun_recovery                           var       int      
Name: mana_recovery                           var       int      
Name: morale_recovery                         var       int      
Name: painkiller_recovery                     var       int      
In this script 'return' statement is empty, script returning values are edited directly

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: actor                                   ptre      BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptre      BattleGame
Name: body_part                               var       int      
Name: energy_recovery                         var       int      
Name: health_recovery                         var       int      
Name: item                                    ptre      BattleItem
Name: mana_recovery                           var       int      
Name: medikit_action_heal                               int       1
Name: medikit_action_painkiller                         int       4
Name: medikit_action_stimulant                          int       2
Name: medikit_action_type                     var       int      
Name: morale_recovery                         var       int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: painkiller_recovery                     var       int      
Name: rules                                   ptr       RuleMod  
Name: stun_recovery                           var       int      
Name: target                                  ptre      BattleUnit
Name: wound_recovery                          var       int      

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'createUnit'  in group:  'unit'

Have global events

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptre      BattleGame
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: turn                                              int      
Name: unit                                    ptre      BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'newTurnUnit'  in group:  'unit'

Have global events

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: battle_game                             ptre      BattleGame
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: side                                              int      
Name: turn                                              int      
Name: unit                                    ptre      BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'returnFromMissionUnit'  in group:  'unit'

Have global events

Script return values:
Name: recovery_time                           var       int      
Name: final_mana_loss                         var       int      
Name: final_health_loss                       var       int      
In this script 'return' statement is empty, script returning values are edited directly

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: battle_game                             ptre      BattleGame
Name: final_health_loss                       var       int      
Name: final_mana_loss                         var       int      
Name: health_loss                             var       int      
Name: mana_loss                               var       int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: recovery_time                           var       int      
Name: rules                                   ptr       RuleMod  
Name: soldier                                 ptre      GeoscapeSoldier
Name: statChange                              ptr       StatAdjustment
Name: statPrevious                            ptr       StatAdjustment
Name: unit                                    ptre      BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: StatAdjustment.getBravery               Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getFiring                Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getHealth                Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getManaPool              Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getMelee                 Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getPsiSkill              Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getPsiStrength           Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getReactions             Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getStamina               Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getStrength              Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getThrowing              Args: [ptr StatAdjustment] [var int]                    
Name: StatAdjustment.getTimeUnits             Args: [ptr StatAdjustment] [var int]                    
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'awardExperience'  in group:  'unit'

Have global events

Script return values:
Name: experience_multipler                    var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attacker                                ptr       BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: experience_multipler                    var       int      
Name: experience_type                         var       int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'visibilityUnit'  in group:  'unit'

Have global events

Script return values:
Name: current_visibility                      var       int      
Name: visibility_mode                         var       BattleUnitVisibility.Tag

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: current_visibility                      var       int      
Name: default_visibility                      var       int      
Name: distance                                          int      
Name: distance_max                                      int      
Name: fire_density                                      int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: observer_unit                           ptr       BattleUnit
Name: rules                                   ptr       RuleMod  
Name: smoke_density                                     int      
Name: target_unit                             ptr       BattleUnit
Name: visibility_mode                         var       BattleUnitVisibility.Tag

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-27]	[DEBUG]	Script info for:  'statsForNerdsArmor'  in group:  'unit'

Have global events

Script data:
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: geoscape_game                           ptr       GeoscapeGame
Name: null                                              null     
Name: rule                                    ptr       RuleArmor
Name: rules                                   ptr       RuleMod  
Name: stats_state                             ptre      StatsForNerds

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre ] [var int]               
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: StatsForNerds.addIntRow                 Args: [ptre StatsForNerds] [text] [int]                 Desc: add new row with first argument as name and second argument as value
Name: StatsForNerds.addTextFormatRow          Args: [ptre StatsForNerds] [text] [text] [int]          Desc: add new row with first argument as name and second argument as text format with one argument
Name: StatsForNerds.addTextFormatRow          Args: [ptre StatsForNerds] [text] [text] [int] [int]    Desc: add new row with first argument as name and second argument as text format with two arguments
Name: StatsForNerds.addTextRow                Args: [ptre StatsForNerds] [text] [text]                Desc: add new row with first argument as name and second argument as text value to translate
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr ]                             
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'recolorItemSprite'  in group:  'item'

Have global events

Script default implementation:
add_shade new_pixel shade; return new_pixel;

Script return values:
Name: new_pixel                               var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: anim_frame                                        int      
Name: battle_game                             ptr       BattleGame
Name: blit_item_big                                     int       11
Name: blit_item_floor                                   int       10
Name: blit_item_lefthand                                int       9
Name: blit_item_righthand                               int       8
Name: blit_part                                         int      
Name: item                                    ptr       BattleItem
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: new_pixel                               var       int      
Name: null                                              null     
Name: old_pixel                               var       int      
Name: rules                                   ptr       RuleMod  
Name: shade                                             int      

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'selectItemSprite'  in group:  'item'

Have global events

Script default implementation:
add sprite_index sprite_offset; return sprite_index;

Script return values:
Name: sprite_index                            var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: anim_frame                                        int      
Name: battle_game                             ptr       BattleGame
Name: blit_item_big                                     int       11
Name: blit_item_floor                                   int       10
Name: blit_item_lefthand                                int       9
Name: blit_item_righthand                               int       8
Name: blit_part                                         int      
Name: item                                    ptr       BattleItem
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: shade                                             int      
Name: sprite_index                            var       int      
Name: sprite_offset                           var       int      

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'inventorySpriteOverlay'  in group:  'item'

Have global events

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: CURSOR_HOVER                                      int       16
Name: CURSOR_SELECTED                                   int       32
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: DRAW_AMMO                                         int       8
Name: DRAW_CORPSE_STATE                                 int       2
Name: DRAW_FATAL_WOUNDS                                 int       4
Name: DRAW_GRENADE_INDICATOR                            int       1
Name: DRAW_MEDIKIT                                      int       16
Name: DRAW_TWOHAND_INDICATOR                            int       32
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INVENTORY_AMMO                                    int       64
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_HAND_OVERLAY_H                                int       48
Name: INV_HAND_OVERLAY_W                                int       32
Name: INV_HAND_SLOT_COUNT_H                             int       3
Name: INV_HAND_SLOT_COUNT_W                             int       2
Name: INV_SLOT                                          int       0
Name: INV_SLOT_H                                        int       16
Name: INV_SLOT_W                                        int       16
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SCREEN_ALIEN_INV                                  int       4
Name: SCREEN_BATTSCAPE                                  int       2
Name: SCREEN_INVENTORY                                  int       1
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: anim_frame                                        int      
Name: battle_game                             ptr       BattleGame
Name: item                                    ptr       BattleItem
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: overlay                                 ptre      SpriteOverlay
Name: render_context                          ptre      InvSpriteContext
Name: rules                                   ptr       RuleMod  

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: InvSpriteContext.getContext             Args: [ptre InvSpriteContext] [var int]                 Desc: Gets the current render context.
Name: InvSpriteContext.getRenderOptions       Args: [ptre InvSpriteContext] [var int]                 Desc: Gets the current render options.
Name: InvSpriteContext.isInContext            Args: [ptre InvSpriteContext] [var int] [int]           Desc: Gets if the overlay is in a given context or not (via bitwise &). (result option)
Name: InvSpriteContext.isRenderOptionSet      Args: [ptre InvSpriteContext] [var int] [int]           Desc: Gets if a render option is set or not (via bitwise &). (result, option)
Name: InvSpriteContext.setRenderOptions       Args: [ptre InvSpriteContext] [int]                     Desc: Sets (turns on) a given render option or options.
Name: InvSpriteContext.unsetRenderOptions     Args: [ptre InvSpriteContext] [int]                     Desc: Unsets (turns off) a given render option or options.
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: SpriteOverlay.blit                      Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int]     Desc: Blits a sprite onto the overlay. (sprite x y)
Name: SpriteOverlay.blitCrop                  Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int] [int]Desc: Blits a sprite onto the overlay with a crop. (sprite x y cropX1 cropY1 cropX2 cropY2)
Name: SpriteOverlay.blitShade                 Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int]Desc: Blits and shades a sprite onto the overlay. (sprite x y shade)
Name: SpriteOverlay.blitShadeRecolor          Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int] [int]Desc: Blits, shades, and recolors a sprite onto the overlay. (sprite x y shade color)
Name: SpriteOverlay.drawCirc                  Args: [ptre SpriteOverlay] [int] [int] [int] [int]      Desc: Draws a circle on the overlay. (x y radius color)
Name: SpriteOverlay.drawLine                  Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int]Desc: Draws a line on the overlay. (x1 y1 x2 y2 color)
Name: SpriteOverlay.drawNumber                Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int] [int]Desc: Draws number on the overlay. (number x y width height color)
Name: SpriteOverlay.drawRect                  Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int]Desc: Draws a rectangle on the overlay. (x1 y1 x2 y2 color)
Name: SpriteOverlay.drawText                  Args: [ptre SpriteOverlay] [text] [int] [int] [int] [int] [int]Desc: Draws text on the overlay. (text x y width height color
Name: SpriteOverlay.getHeight                 Args: [ptr SpriteOverlay] [var int]                     Desc: Gets the height of this overlay.
Name: SpriteOverlay.getWidth                  Args: [ptr SpriteOverlay] [var int]                     Desc: Gets the width of this overlay.
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'handOverlay'  in group:  'item'

Have global events

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: CURSOR_HOVER                                      int       16
Name: CURSOR_SELECTED                                   int       32
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: DRAW_AMMO                                         int       8
Name: DRAW_CORPSE_STATE                                 int       2
Name: DRAW_FATAL_WOUNDS                                 int       4
Name: DRAW_GRENADE_INDICATOR                            int       1
Name: DRAW_MEDIKIT                                      int       16
Name: DRAW_TWOHAND_INDICATOR                            int       32
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INVENTORY_AMMO                                    int       64
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_HAND_OVERLAY_H                                int       48
Name: INV_HAND_OVERLAY_W                                int       32
Name: INV_HAND_SLOT_COUNT_H                             int       3
Name: INV_HAND_SLOT_COUNT_W                             int       2
Name: INV_SLOT                                          int       0
Name: INV_SLOT_H                                        int       16
Name: INV_SLOT_W                                        int       16
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SCREEN_ALIEN_INV                                  int       4
Name: SCREEN_BATTSCAPE                                  int       2
Name: SCREEN_INVENTORY                                  int       1
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: anim_frame                                        int      
Name: battle_game                             ptr       BattleGame
Name: item                                    ptr       BattleItem
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: overlay                                 ptre      SpriteOverlay
Name: render_context                          ptre      InvSpriteContext
Name: rules                                   ptr       RuleMod  

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: InvSpriteContext.getContext             Args: [ptre InvSpriteContext] [var int]                 Desc: Gets the current render context.
Name: InvSpriteContext.getRenderOptions       Args: [ptre InvSpriteContext] [var int]                 Desc: Gets the current render options.
Name: InvSpriteContext.isInContext            Args: [ptre InvSpriteContext] [var int] [int]           Desc: Gets if the overlay is in a given context or not (via bitwise &). (result option)
Name: InvSpriteContext.isRenderOptionSet      Args: [ptre InvSpriteContext] [var int] [int]           Desc: Gets if a render option is set or not (via bitwise &). (result, option)
Name: InvSpriteContext.setRenderOptions       Args: [ptre InvSpriteContext] [int]                     Desc: Sets (turns on) a given render option or options.
Name: InvSpriteContext.unsetRenderOptions     Args: [ptre InvSpriteContext] [int]                     Desc: Unsets (turns off) a given render option or options.
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: SpriteOverlay.blit                      Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int]     Desc: Blits a sprite onto the overlay. (sprite x y)
Name: SpriteOverlay.blitCrop                  Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int] [int]Desc: Blits a sprite onto the overlay with a crop. (sprite x y cropX1 cropY1 cropX2 cropY2)
Name: SpriteOverlay.blitShade                 Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int]Desc: Blits and shades a sprite onto the overlay. (sprite x y shade)
Name: SpriteOverlay.blitShadeRecolor          Args: [ptre SpriteOverlay] [ptr Sprite] [int] [int] [int] [int]Desc: Blits, shades, and recolors a sprite onto the overlay. (sprite x y shade color)
Name: SpriteOverlay.drawCirc                  Args: [ptre SpriteOverlay] [int] [int] [int] [int]      Desc: Draws a circle on the overlay. (x y radius color)
Name: SpriteOverlay.drawLine                  Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int]Desc: Draws a line on the overlay. (x1 y1 x2 y2 color)
Name: SpriteOverlay.drawNumber                Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int] [int]Desc: Draws number on the overlay. (number x y width height color)
Name: SpriteOverlay.drawRect                  Args: [ptre SpriteOverlay] [int] [int] [int] [int] [int]Desc: Draws a rectangle on the overlay. (x1 y1 x2 y2 color)
Name: SpriteOverlay.drawText                  Args: [ptre SpriteOverlay] [text] [int] [int] [int] [int] [int]Desc: Draws text on the overlay. (text x y width height color
Name: SpriteOverlay.getHeight                 Args: [ptr SpriteOverlay] [var int]                     Desc: Gets the height of this overlay.
Name: SpriteOverlay.getWidth                  Args: [ptr SpriteOverlay] [var int]                     Desc: Gets the width of this overlay.
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'reactionWeaponAction'  in group:  'item'

Have global events

Script return values:
Name: reaction_chance                         var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: action_target                           ptr       BattleUnit
Name: action_unit                             ptr       BattleUnit
Name: arc_to_action_unit                                int      
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptr       BattleGame
Name: distance                                var       int      
Name: move                                              int      
Name: move_normal                                       int       0
Name: move_run                                          int       1
Name: move_sneak                                        int       3
Name: move_strafe                                       int       2
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: reaction_battle_action                            int      
Name: reaction_chance                         var       int      
Name: reaction_count                                    int      
Name: reaction_unit                           ptr       BattleUnit
Name: reaction_weapon                         ptr       BattleItem
Name: rules                                   ptr       RuleMod  
Name: skill                                   ptr       RuleSkill
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'tryPsiAttackItem'  in group:  'item'

Have global events

Script default implementation:
var int r; random.randomRange r 0 55; add psi_attack_success attack_strength; add psi_attack_success r; sub psi_attack_success defense_strength; sub psi_attack_success distance_strength_reduction; return psi_attack_success;

Script return values:
Name: psi_attack_success                      var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attack_strength                                   int      
Name: attacker                                ptr       BattleUnit
Name: battle_action                                     int      
Name: battle_game                             ptr       BattleGame
Name: defense_strength                                  int      
Name: distance                                          int      
Name: distance_strength_reduction                       int      
Name: item                                    ptr       BattleItem
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: psi_attack_success                      var       int      
Name: random                                  ptre      RandomState
Name: rules                                   ptr       RuleMod  
Name: skill                                   ptr       RuleSkill
Name: victim                                  ptr       BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'tryMeleeAttackItem'  in group:  'item'

Have global events

Script default implementation:
var int r;
random.randomRange r 0 99;
sub melee_attack_success r;
add melee_attack_success attack_strength;
sub melee_attack_success defense_strength;
add melee_attack_success defense_strength_penalty;
return melee_attack_success;


Script return values:
Name: melee_attack_success                    var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: arc_to_attacker                                   int      
Name: attack_strength                                   int      
Name: attacker                                ptr       BattleUnit
Name: battle_action                                     int      
Name: battle_game                             ptr       BattleGame
Name: defense_strength                                  int      
Name: defense_strength_penalty                          int      
Name: item                                    ptr       BattleItem
Name: melee_attack_success                    var       int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: random                                  ptre      RandomState
Name: rules                                   ptr       RuleMod  
Name: skill                                   ptr       RuleSkill
Name: victim                                  ptr       BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'hitUnitAmmo'  in group:  'item'

Have global events

Script return values:
Name: power                                   var       int      
Name: part                                    var       int      
Name: side                                    var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attacker                                ptre      BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptre      BattleGame
Name: damaging_item                           ptre      BattleItem
Name: damaging_type                                     int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: orig_power                                        int      
Name: part                                    var       int      
Name: power                                   var       int      
Name: rules                                   ptr       RuleMod  
Name: side                                    var       int      
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptre      BattleUnit
Name: weapon_item                             ptre      BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'damageUnitAmmo'  in group:  'item'

Have global events

Script return values:
Name: to_health                               var       int      
Name: to_armor                                var       int      
Name: to_stun                                 var       int      
Name: to_time                                 var       int      
Name: to_energy                               var       int      
Name: to_morale                               var       int      
Name: to_wound                                var       int      
Name: to_transform                            var       int      
Name: to_mana                                 var       int      
In this script 'return' statement is empty, script returning values are edited directly

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attacker                                ptre      BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptre      BattleGame
Name: currPower                                         int      
Name: damaging_item                           ptre      BattleItem
Name: damaging_type                                     int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: orig_power                                        int      
Name: part                                              int      
Name: rules                                   ptr       RuleMod  
Name: side                                              int      
Name: skill                                   ptr       RuleSkill
Name: to_armor                                var       int      
Name: to_energy                               var       int      
Name: to_health                               var       int      
Name: to_mana                                 var       int      
Name: to_morale                               var       int      
Name: to_stun                                 var       int      
Name: to_time                                 var       int      
Name: to_transform                            var       int      
Name: to_wound                                var       int      
Name: unit                                    ptre      BattleUnit
Name: weapon_item                             ptre      BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'damageSpecialUnitAmmo'  in group:  'item'

Have global events

Script return values:
Name: transform_chance                        var       int      
Name: self_destruct_chance                    var       int      
Name: morale_loss                             var       int      
Name: fire                                    var       int      
In this script 'return' statement is empty, script returning values are edited directly

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: attacker                                ptre      BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptre      BattleGame
Name: damaging_item                           ptre      BattleItem
Name: damaging_type                                     int      
Name: fire                                    var       int      
Name: health_damage                                     int      
Name: morale_loss                             var       int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: orig_power                                        int      
Name: part                                              int      
Name: rules                                   ptr       RuleMod  
Name: self_destruct                           var       int      
Name: self_destruct_chance                    var       int      
Name: side                                              int      
Name: skill                                   ptr       RuleSkill
Name: transform                               var       int      
Name: transform_chance                        var       int      
Name: unit                                    ptre      BattleUnit
Name: weapon_item                             ptre      BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'createItem'  in group:  'item'

Have global events

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: battle_game                             ptre      BattleGame
Name: item                                    ptre      BattleItem
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: turn                                              int      
Name: unit                                    ptre      BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'newTurnItem'  in group:  'item'

Have global events

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: battle_game                             ptre      BattleGame
Name: item                                    ptre      BattleItem
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: side                                              int      
Name: turn                                              int      

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-28]	[DEBUG]	Script info for:  'statsForNerdsItem'  in group:  'item'

Have global events

Script data:
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: geoscape_game                           ptr       GeoscapeGame
Name: null                                              null     
Name: rule                                    ptr       RuleItem 
Name: rules                                   ptr       RuleMod  
Name: stats_state                             ptre      StatsForNerds

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre ] [var int]               
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: StatsForNerds.addIntRow                 Args: [ptre StatsForNerds] [text] [int]                 Desc: add new row with first argument as name and second argument as value
Name: StatsForNerds.addTextFormatRow          Args: [ptre StatsForNerds] [text] [text] [int]          Desc: add new row with first argument as name and second argument as text format with one argument
Name: StatsForNerds.addTextFormatRow          Args: [ptre StatsForNerds] [text] [text] [int] [int]    Desc: add new row with first argument as name and second argument as text format with two arguments
Name: StatsForNerds.addTextRow                Args: [ptre StatsForNerds] [text] [text]                Desc: add new row with first argument as name and second argument as text value to translate
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr ]                             
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'psiDefenceBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'meleeDodgeBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'timeRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'energyRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'moraleRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'healthRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'manaRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'stunRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'timeSoldierRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'energySoldierRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'moraleSoldierRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'healthSoldierRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'manaSoldierRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'stunSoldierRecoveryBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'damageBonusBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'meleeBonusBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'accuracyMultiplierBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'meleeMultiplierBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'throwMultiplierBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'closeQuartersMultiplierBonusStats'  in group:  'bonuses'

Have global events

Script return values:
Name: bonus                                   var       int      

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: ammo                                    ptr       BattleItem
Name: battle_action                                     int      
Name: bonus                                   var       int      
Name: external_bonuses                                  int      
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: skill                                   ptr       RuleSkill
Name: unit                                    ptr       BattleUnit
Name: weapon                                  ptr       BattleItem

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.braveryBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'bravery' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.energyCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.energyRegenBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'energyRegen' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.fatalWoundsBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'fatalWounds' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.firingReactionsBonusStats    Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'firingReactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatHundredBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatHundred' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.flatOneBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'flatOne' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.healthBonusStats             Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'health' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.healthNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'healthNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.manaBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'mana' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.manaNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'manaNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.meleeBonusStats              Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'melee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleCurrentBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.moraleNormalizedBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'moraleNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiBonusStats                Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psi' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiSkillBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiSkill' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.psiStrengthBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'psiStrength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.rankBonusStats               Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'rank' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reactionsBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'reactions' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.staminaBonusStats            Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stamina' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strength' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthMeleeBonusStats      Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthMelee' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.strengthThrowingBonusStats   Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'strengthThrowing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunCurrentBonusStats        Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.stunNormalizedBonusStats     Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'stunNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.throwingBonusStats           Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'throwing' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuBonusStats                 Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tu' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuCurrentBonusStats          Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuCurrent' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: BattleUnit.tuNormalizedBonusStats       Args: [ptr BattleUnit] [var int] [int] [int] [int] [int]Desc: add stat 'tuNormalized' transformed by polynomial (const arguments are coefficients), final result of polynomial is divided by 1000
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'skillUseUnit'  in group:  'skill'

Have global events

Script return values:
Name: continue_action                         var       int      
Name: spend_tu                                var       int      
In this script 'return' statement is empty, script returning values are edited directly

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: actor                                   ptre      BattleUnit
Name: battle_action                                     int      
Name: battle_action_aimshoot                            int       9
Name: battle_action_autoshoot                           int       7
Name: battle_action_cqb                                 int       16
Name: battle_action_hit                                 int       10
Name: battle_action_mindcontrol                         int       13
Name: battle_action_panic                               int       14
Name: battle_action_snapshot                            int       8
Name: battle_action_throw                               int       6
Name: battle_action_use                                 int       11
Name: battle_action_walk                                int       2
Name: battle_game                             ptre      BattleGame
Name: continue_action                         var       int      
Name: have_tu                                           int      
Name: item                                    ptre      BattleItem
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: skill                                   ptr       RuleSkill
Name: spend_tu                                var       int      

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'detectUfoFromBase'  in group:  'ufo'

Have global events

Script return values:
Name: detection_type                          var       int      
Name: detection_chance                        var       int      

Script data:
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: DETECTION_HYPERWAVE                               int       3
Name: DETECTION_NONE                                    int       0
Name: DETECTION_RADAR                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UFO_CRASHED                                       int       2
Name: UFO_DESTROYED                                     int       3
Name: UFO_FLYING                                        int       0
Name: UFO_LANDED                                        int       1
Name: already_tracked                                   int      
Name: detection_chance                        var       int      
Name: detection_type                          var       int      
Name: distance                                          int      
Name: geoscape_game                           ptr       GeoscapeGame
Name: hyperwave_max_distance                            int      
Name: hyperwave_total_strength                          int      
Name: null                                              null     
Name: radar_max_distance                                int      
Name: radar_total_strength                              int      
Name: rules                                   ptr       RuleMod  
Name: ufo                                     ptr       Ufo      

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre ] [var int]               
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUfo.getAccel                        Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getArmor                        Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getAvoidBonus                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getDamageMax                    Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getFuelMax                      Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getHitBonus                     Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getPowerBonus                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getRadarChance                  Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getRadarRange                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getRadius                       Args: [ptr RuleUfo] [var int]                           
Name: RuleUfo.getShieldBleedThrough           Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getShieldCapacity               Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getShieldRecharge               Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getShieldRechargeInGeoscape     Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getSightRange                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getSpeedMax                     Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getTag                          Args: [ptr RuleUfo] [var int] [RuleUfo.Tag]             Desc: Get tag of RuleUfo
Name: RuleUfo.getWeaponPower                  Args: [ptr RuleUfo] [var int]                           
Name: RuleUfo.getWeaponRange                  Args: [ptr RuleUfo] [var int]                           
Name: RuleUfo.getWeaponReload                 Args: [ptr RuleUfo] [var int]                           
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr ]                             
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              
Name: Ufo.Stats.getAccel                      Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getArmor                      Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getAvoidBonus                 Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getDamageMax                  Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getFuelMax                    Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getHitBonus                   Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getPowerBonus                 Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getRadarChance                Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getRadarRange                 Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getShieldBleedThrough         Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getShieldCapacity             Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getShieldRecharge             Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getShieldRechargeInGeoscape   Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getSightRange                 Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getSpeedMax                   Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.getAltitude                         Args: [ptr Ufo] [var int]                               
Name: Ufo.getDamage                           Args: [ptr Ufo] [var int]                               
Name: Ufo.getDamageMax                        Args: [ptr Ufo] [var int]                               
Name: Ufo.getDamagePercentage                 Args: [ptr Ufo] [var int]                               
Name: Ufo.getDetected                         Args: [ptr Ufo] [var int]                               
Name: Ufo.getHuntBehavior                     Args: [ptr Ufo] [var int]                               
Name: Ufo.getHuntMode                         Args: [ptr Ufo] [var int]                               
Name: Ufo.getHyperDetected                    Args: [ptr Ufo] [var int]                               
Name: Ufo.getId                               Args: [ptr ] [var int]                                  
Name: Ufo.getRuleUfo                          Args: [ptr Ufo] [var ptr RuleUfo]                       
Name: Ufo.getRules                            Args: [ptr Ufo] [var ptr RuleUfo]                       
Name: Ufo.getShield                           Args: [ptr Ufo] [var int]                               
Name: Ufo.getShieldMax                        Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.getShieldPercentage                 Args: [ptr Ufo] [var int]                               
Name: Ufo.getStatus                           Args: [ptr Ufo] [var int]                               
Name: Ufo.getTag                              Args: [ptr Ufo] [var int] [Ufo.Tag]                     Desc: Get tag of Ufo
Name: Ufo.getTag                              Args: [ptr Ufo] [var int] [RuleUfo.Tag]                 Desc: Get tag of Ufo
Name: Ufo.getVisibility                       Args: [ptr Ufo] [var int]                               
Name: Ufo.isEscorting                         Args: [ptr Ufo] [var int]                               
Name: Ufo.isHunterKiller                      Args: [ptr Ufo] [var int]                               
Name: Ufo.isHunting                           Args: [ptr Ufo] [var int]                               
Name: Ufo.setTag                              Args: [ptre Ufo] [Ufo.Tag] [int]                        Desc: Set tag of Ufo

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'detectUfoFromCraft'  in group:  'ufo'

Have global events

Script return values:
Name: detection_type                          var       int      
Name: detection_chance                        var       int      

Script data:
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: DETECTION_HYPERWAVE                               int       3
Name: DETECTION_NONE                                    int       0
Name: DETECTION_RADAR                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UFO_CRASHED                                       int       2
Name: UFO_DESTROYED                                     int       3
Name: UFO_FLYING                                        int       0
Name: UFO_LANDED                                        int       1
Name: already_tracked                                   int      
Name: craft                                   ptr       Craft    
Name: detection_chance                        var       int      
Name: detection_type                          var       int      
Name: distance                                          int      
Name: geoscape_game                           ptr       GeoscapeGame
Name: null                                              null     
Name: radar_max_distance                                int      
Name: radar_total_strength                              int      
Name: rules                                   ptr       RuleMod  
Name: ufo                                     ptr       Ufo      

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre ] [var int]               
Name: Craft.Stats.getAccel                    Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getArmor                    Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getAvoidBonus               Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getDamageMax                Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getFuelMax                  Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getHitBonus                 Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getPowerBonus               Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getRadarChance              Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getRadarRange               Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getShieldBleedThrough       Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getShieldCapacity           Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getShieldRecharge           Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getShieldRechargeInGeoscape Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getSightRange               Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.Stats.getSpeedMax                 Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.getDamage                         Args: [ptr Craft] [var int]                             
Name: Craft.getDamageMax                      Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.getDamagePercentage               Args: [ptr Craft] [var int]                             
Name: Craft.getId                             Args: [ptr ] [var int]                                  
Name: Craft.getRuleCraft                      Args: [ptr Craft] [var ptr RuleCraft]                   
Name: Craft.getShield                         Args: [ptr Craft] [var int]                             
Name: Craft.getShieldMax                      Args: [ptr Craft] [var int]                             Desc: Get inner field of Craft
Name: Craft.getShieldPercentage               Args: [ptr Craft] [var int]                             
Name: Craft.getTag                            Args: [ptr Craft] [var int] [Craft.Tag]                 Desc: Get tag of Craft
Name: Craft.getTag                            Args: [ptr Craft] [var int] [RuleCraft.Tag]             Desc: Get tag of Craft
Name: Craft.setTag                            Args: [ptre Craft] [Craft.Tag] [int]                    Desc: Set tag of Craft
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleCraft.Stats.getAccel                Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getArmor                Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getAvoidBonus           Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getDamageMax            Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getFuelMax              Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getHitBonus             Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getPowerBonus           Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getRadarChance          Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getRadarRange           Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getShieldBleedThrough   Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getShieldCapacity       Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getShieldRecharge       Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getShieldRechargeInGeoscapeArgs: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getSightRange           Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getSpeedMax             Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.getPilotsMax                  Args: [ptr RuleCraft] [var int]                         
Name: RuleCraft.getSoldiersMax                Args: [ptr RuleCraft] [var int]                         
Name: RuleCraft.getTag                        Args: [ptr RuleCraft] [var int] [RuleCraft.Tag]         Desc: Get tag of RuleCraft
Name: RuleCraft.getType                       Args: [ptr RuleCraft] [var text]                        
Name: RuleCraft.getVehiclesMax                Args: [ptr RuleCraft] [var int]                         
Name: RuleCraft.getWeaponsMax                 Args: [ptr RuleCraft] [var int]                         
Name: RuleCraft.setTag                        Args: [ptre RuleCraft] [RuleCraft.Tag] [int]            Desc: Set tag of RuleCraft
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUfo.getAccel                        Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getArmor                        Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getAvoidBonus                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getDamageMax                    Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getFuelMax                      Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getHitBonus                     Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getPowerBonus                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getRadarChance                  Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getRadarRange                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getRadius                       Args: [ptr RuleUfo] [var int]                           
Name: RuleUfo.getShieldBleedThrough           Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getShieldCapacity               Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getShieldRecharge               Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getShieldRechargeInGeoscape     Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getSightRange                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getSpeedMax                     Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getTag                          Args: [ptr RuleUfo] [var int] [RuleUfo.Tag]             Desc: Get tag of RuleUfo
Name: RuleUfo.getWeaponPower                  Args: [ptr RuleUfo] [var int]                           
Name: RuleUfo.getWeaponRange                  Args: [ptr RuleUfo] [var int]                           
Name: RuleUfo.getWeaponReload                 Args: [ptr RuleUfo] [var int]                           
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr ]                             
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              
Name: Ufo.Stats.getAccel                      Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getArmor                      Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getAvoidBonus                 Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getDamageMax                  Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getFuelMax                    Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getHitBonus                   Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getPowerBonus                 Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getRadarChance                Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getRadarRange                 Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getShieldBleedThrough         Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getShieldCapacity             Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getShieldRecharge             Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getShieldRechargeInGeoscape   Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getSightRange                 Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.Stats.getSpeedMax                   Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.getAltitude                         Args: [ptr Ufo] [var int]                               
Name: Ufo.getDamage                           Args: [ptr Ufo] [var int]                               
Name: Ufo.getDamageMax                        Args: [ptr Ufo] [var int]                               
Name: Ufo.getDamagePercentage                 Args: [ptr Ufo] [var int]                               
Name: Ufo.getDetected                         Args: [ptr Ufo] [var int]                               
Name: Ufo.getHuntBehavior                     Args: [ptr Ufo] [var int]                               
Name: Ufo.getHuntMode                         Args: [ptr Ufo] [var int]                               
Name: Ufo.getHyperDetected                    Args: [ptr Ufo] [var int]                               
Name: Ufo.getId                               Args: [ptr ] [var int]                                  
Name: Ufo.getRuleUfo                          Args: [ptr Ufo] [var ptr RuleUfo]                       
Name: Ufo.getRules                            Args: [ptr Ufo] [var ptr RuleUfo]                       
Name: Ufo.getShield                           Args: [ptr Ufo] [var int]                               
Name: Ufo.getShieldMax                        Args: [ptr Ufo] [var int]                               Desc: Get inner field of Ufo
Name: Ufo.getShieldPercentage                 Args: [ptr Ufo] [var int]                               
Name: Ufo.getStatus                           Args: [ptr Ufo] [var int]                               
Name: Ufo.getTag                              Args: [ptr Ufo] [var int] [Ufo.Tag]                     Desc: Get tag of Ufo
Name: Ufo.getTag                              Args: [ptr Ufo] [var int] [RuleUfo.Tag]                 Desc: Get tag of Ufo
Name: Ufo.getVisibility                       Args: [ptr Ufo] [var int]                               
Name: Ufo.isEscorting                         Args: [ptr Ufo] [var int]                               
Name: Ufo.isHunterKiller                      Args: [ptr Ufo] [var int]                               
Name: Ufo.isHunting                           Args: [ptr Ufo] [var int]                               
Name: Ufo.setTag                              Args: [ptre Ufo] [Ufo.Tag] [int]                        Desc: Set tag of Ufo

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'statsForNerdsUfo'  in group:  'ufo'

Have global events

Script data:
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: geoscape_game                           ptr       GeoscapeGame
Name: null                                              null     
Name: rule                                    ptr       RuleUfo  
Name: rules                                   ptr       RuleMod  
Name: stats_state                             ptre      StatsForNerds

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre ] [var int]               
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUfo.getAccel                        Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getArmor                        Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getAvoidBonus                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getDamageMax                    Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getFuelMax                      Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getHitBonus                     Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getPowerBonus                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getRadarChance                  Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getRadarRange                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getRadius                       Args: [ptr RuleUfo] [var int]                           
Name: RuleUfo.getShieldBleedThrough           Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getShieldCapacity               Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getShieldRecharge               Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getShieldRechargeInGeoscape     Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getSightRange                   Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getSpeedMax                     Args: [ptr RuleUfo] [var int]                           Desc: Get inner field of RuleUfo
Name: RuleUfo.getTag                          Args: [ptr RuleUfo] [var int] [RuleUfo.Tag]             Desc: Get tag of RuleUfo
Name: RuleUfo.getWeaponPower                  Args: [ptr RuleUfo] [var int]                           
Name: RuleUfo.getWeaponRange                  Args: [ptr RuleUfo] [var int]                           
Name: RuleUfo.getWeaponReload                 Args: [ptr RuleUfo] [var int]                           
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: StatsForNerds.addIntRow                 Args: [ptre StatsForNerds] [text] [int]                 Desc: add new row with first argument as name and second argument as value
Name: StatsForNerds.addTextFormatRow          Args: [ptre StatsForNerds] [text] [text] [int]          Desc: add new row with first argument as name and second argument as text format with one argument
Name: StatsForNerds.addTextFormatRow          Args: [ptre StatsForNerds] [text] [text] [int] [int]    Desc: add new row with first argument as name and second argument as text format with two arguments
Name: StatsForNerds.addTextRow                Args: [ptre StatsForNerds] [text] [text]                Desc: add new row with first argument as name and second argument as text value to translate
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr ]                             
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'statsForNerdsCraft'  in group:  'craft'

Have global events

Script data:
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: geoscape_game                           ptr       GeoscapeGame
Name: null                                              null     
Name: rule                                    ptr       RuleCraft
Name: rules                                   ptr       RuleMod  
Name: stats_state                             ptre      StatsForNerds

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre ] [var int]               
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleCraft.Stats.getAccel                Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getArmor                Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getAvoidBonus           Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getDamageMax            Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getFuelMax              Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getHitBonus             Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getPowerBonus           Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getRadarChance          Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getRadarRange           Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getShieldBleedThrough   Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getShieldCapacity       Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getShieldRecharge       Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getShieldRechargeInGeoscapeArgs: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getSightRange           Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.Stats.getSpeedMax             Args: [ptr RuleCraft] [var int]                         Desc: Get inner field of RuleCraft
Name: RuleCraft.getPilotsMax                  Args: [ptr RuleCraft] [var int]                         
Name: RuleCraft.getSoldiersMax                Args: [ptr RuleCraft] [var int]                         
Name: RuleCraft.getTag                        Args: [ptr RuleCraft] [var int] [RuleCraft.Tag]         Desc: Get tag of RuleCraft
Name: RuleCraft.getType                       Args: [ptr RuleCraft] [var text]                        
Name: RuleCraft.getVehiclesMax                Args: [ptr RuleCraft] [var int]                         
Name: RuleCraft.getWeaponsMax                 Args: [ptr RuleCraft] [var int]                         
Name: RuleCraft.setTag                        Args: [ptre RuleCraft] [RuleCraft.Tag] [int]            Desc: Set tag of RuleCraft
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: StatsForNerds.addIntRow                 Args: [ptre StatsForNerds] [text] [int]                 Desc: add new row with first argument as name and second argument as value
Name: StatsForNerds.addTextFormatRow          Args: [ptre StatsForNerds] [text] [text] [int] [int]    Desc: add new row with first argument as name and second argument as text format with two arguments
Name: StatsForNerds.addTextFormatRow          Args: [ptre StatsForNerds] [text] [text] [int]          Desc: add new row with first argument as name and second argument as text format with one argument
Name: StatsForNerds.addTextRow                Args: [ptre StatsForNerds] [text] [text]                Desc: add new row with first argument as name and second argument as text value to translate
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr ]                             
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                              

[29-12-2024_10-14-30]	[DEBUG]	Script info for:  'applySoldierBonuses'  in group:  'soldier'

Have global events

Script data:
Name: BA_AIMEDSHOT                                      int       9
Name: BA_AUTOSHOT                                       int       7
Name: BA_HIT                                            int       10
Name: BA_LAUNCH                                         int       12
Name: BA_MINDCONTROL                                    int       13
Name: BA_NONE                                           int       0
Name: BA_PANIC                                          int       14
Name: BA_PRIME                                          int       4
Name: BA_SNAPSHOT                                       int       8
Name: BA_THROW                                          int       6
Name: BA_TRIGGER_PROXY_GRENADE                          int       18
Name: BA_TRIGGER_TIMED_GRENADE                          int       17
Name: BA_UNPRIME                                        int       5
Name: BA_USE                                            int       11
Name: BMT_HEAL                                          int       1
Name: BMT_NORMAL                                        int       0
Name: BMT_PAINKILER                                     int       3
Name: BMT_STIMULANT                                     int       2
Name: BODYPART_HEAD                                     int       0
Name: BODYPART_LEFTARM                                  int       3
Name: BODYPART_LEFTLEG                                  int       5
Name: BODYPART_RIGHTARM                                 int       2
Name: BODYPART_RIGHTLEG                                 int       4
Name: BODYPART_TORSO                                    int       1
Name: BT_AMMO                                           int       2
Name: BT_CORPSE                                         int       11
Name: BT_FIREARM                                        int       1
Name: BT_FLARE                                          int       10
Name: BT_GRENADE                                        int       4
Name: BT_MEDIKIT                                        int       6
Name: BT_MELEE                                          int       3
Name: BT_MINDPROBE                                      int       8
Name: BT_NONE                                           int       0
Name: BT_PROXIMITYGRENADE                               int       5
Name: BT_PSIAMP                                         int       9
Name: BT_SCANNER                                        int       7
Name: COLOR_X1_BLUE0                                    int       7
Name: COLOR_X1_BLUE1                                    int       8
Name: COLOR_X1_BLUE2                                    int       13
Name: COLOR_X1_BROWN0                                   int       6
Name: COLOR_X1_BROWN1                                   int       9
Name: COLOR_X1_BROWN2                                   int       10
Name: COLOR_X1_FACE                                     int       9
Name: COLOR_X1_GRAY                                     int       5
Name: COLOR_X1_GREEN0                                   int       3
Name: COLOR_X1_GREEN1                                   int       4
Name: COLOR_X1_HAIR                                     int       6
Name: COLOR_X1_NULL                                     int       0
Name: COLOR_X1_PURPLE0                                  int       11
Name: COLOR_X1_PURPLE1                                  int       12
Name: COLOR_X1_RED                                      int       2
Name: COLOR_X1_SILVER                                   int       14
Name: COLOR_X1_SPECIAL                                  int       15
Name: COLOR_X1_YELLOW                                   int       1
Name: DIFF_BEGINNER                                     int       0
Name: DIFF_EXPERIENCED                                  int       1
Name: DIFF_GENIUS                                       int       3
Name: DIFF_SUPERHUMAN                                   int       4
Name: DIFF_VETERAN                                      int       2
Name: FACTION_HOSTILE                                   int       1
Name: FACTION_NEUTRAL                                   int       2
Name: FACTION_PLAYER                                    int       0
Name: GENDER_FEMALE                                     int       1
Name: GENDER_MALE                                       int       0
Name: INV_GROUND                                        int       2
Name: INV_HAND                                          int       1
Name: INV_SLOT                                          int       0
Name: LOOK_AFRICAN                                      int       3
Name: LOOK_BLONDE                                       int       0
Name: LOOK_BROWNHAIR                                    int       1
Name: LOOK_ORIENTAL                                     int       2
Name: SIDE_FRONT                                        int       0
Name: SIDE_LEFT                                         int       1
Name: SIDE_REAR                                         int       3
Name: SIDE_RIGHT                                        int       2
Name: SIDE_UNDER                                        int       4
Name: STATUS_AIMING                                     int       4
Name: STATUS_BERSERK                                    int       9
Name: STATUS_COLLAPSING                                 int       5
Name: STATUS_DEAD                                       int       6
Name: STATUS_FLYING                                     int       2
Name: STATUS_IGNORE_ME                                  int       10
Name: STATUS_PANICKING                                  int       8
Name: STATUS_STANDING                                   int       0
Name: STATUS_TURNING                                    int       3
Name: STATUS_UNCONSCIOUS                                int       7
Name: STATUS_WALKING                                    int       1
Name: STT_END_POINT                                     int       13
Name: STT_START_POINT                                   int       1
Name: STT_TILE                                          int       0
Name: UNIT_RANK_CAPTAIN                                 int       3
Name: UNIT_RANK_COLONEL                                 int       4
Name: UNIT_RANK_COMMANDER                               int       5
Name: UNIT_RANK_ROOKIE                                  int       0
Name: UNIT_RANK_SERGEANT                                int       2
Name: UNIT_RANK_SQUADDIE                                int       1
Name: movement_type_fly                                 int       1
Name: movement_type_slide                               int       2
Name: movement_type_walk                                int       0
Name: null                                              null     
Name: rules                                   ptr       RuleMod  
Name: save_game                               ptre      BattleGame
Name: soldier_bonus                           ptr       RuleSoldierBonus
Name: unit                                    ptre      BattleUnit

Script operations:
Name: BattleGame.difficultyLevel              Args: [ptr BattleGame] [var int]                        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.flashLongMessage             Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int]        
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int] [int] [int]  
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text]                          
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int] [int]              
Name: BattleGame.flashMessage                 Args: [ptre BattleGame] [text] [int]                    
Name: BattleGame.getAlienItemLevel            Args: [ptre BattleGame] [var int]                       
Name: BattleGame.getAnimFrame                 Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getGeoscapeGame              Args: [ptre BattleGame] [var ptre GeoscapeGame]         
Name: BattleGame.getGeoscapeGame              Args: [ptr BattleGame] [var ptr GeoscapeGame]           
Name: BattleGame.getReinforcementsItemLevel   Args: [ptr BattleGame] [var int]                        
Name: BattleGame.getTag                       Args: [ptr BattleGame] [var int] [BattleGame.Tag]       Desc: Get tag of BattleGame
Name: BattleGame.getTile                      Args: [ptr BattleGame] [var ptr Tile] [int] [int] [int] Desc: Get tile on position x, y, z
Name: BattleGame.getTurn                      Args: [ptr BattleGame] [var int]                        Desc: Current turn, 0 - before battle, 1 - first turn, each stage reset this value.
Name: BattleGame.getTurnSide                  Args: [ptr BattleGame] [var int]                        Desc: Return the faction whose turn it is.
Name: BattleGame.randomChance                 Args: [ptre BattleGame] [var int]                       Desc: first argument is percent in range 0 - 100, then return in that argument random 1 or 0 based on percent
Name: BattleGame.randomRange                  Args: [ptre BattleGame] [var int] [int] [int]           Desc: set in first argument random value from range given in two last arguments
Name: BattleGame.setAlienItemLevel            Args: [ptre BattleGame] [int]                           
Name: BattleGame.setReinforcementsItemLevel   Args: [ptre BattleGame] [int]                           
Name: BattleGame.setTag                       Args: [ptre BattleGame] [BattleGame.Tag] [int]          Desc: Set tag of BattleGame
Name: BattleGame.tryConcealUnit               Args: [ptre BattleGame] [ptre BattleUnit] [var int]     
Name: BattleItem.InventoryMoveCost.getBaseTimePercentArgs: [ptr BattleItem] [var int]                        Desc: Get int field of BattleItem
Name: BattleItem.InventoryMoveCost.setBaseTimePercentArgs: [ptre BattleItem] [int]                           Desc: Set int field of BattleItem
Name: BattleItem.getActionCost.getTimeUnits   Args: [ptr BattleItem] [var int] [ptr BattleUnit] [int] 
Name: BattleItem.getAmmoForAction             Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoForAction             Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptre BattleItem] [var ptre BattleItem] [int]     
Name: BattleItem.getAmmoForSlot               Args: [ptr BattleItem] [var ptr BattleItem] [int]       
Name: BattleItem.getAmmoItem                  Args: [ptre BattleItem] [var ptre BattleItem]           
Name: BattleItem.getAmmoItem                  Args: [ptr BattleItem] [var ptr BattleItem]             
Name: BattleItem.getAmmoQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getBattleUnit                Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getBattleUnit                Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getFuseTimer                 Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getFuseTimerDefault          Args: [ptr BattleItem] [var int]                        Desc: get default fuse timer
Name: BattleItem.getGlow                      Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getHealQuantity              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getId                        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getMoveToCost                Args: [ptr BattleItem] [var int] [ptr RuleInventory]    Desc: cost of moving item from slot in first arg to slot from last arg
Name: BattleItem.getOwner                     Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getOwner                     Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPainKillerQuantity        Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getPreviousOwner             Args: [ptre BattleItem] [var ptre BattleUnit]           
Name: BattleItem.getPreviousOwner             Args: [ptr BattleItem] [var ptr BattleUnit]             
Name: BattleItem.getRuleItem                  Args: [ptr BattleItem] [var ptr RuleItem]               
Name: BattleItem.getSlot                      Args: [ptr BattleItem] [var ptr RuleInventory]          
Name: BattleItem.getStimulantQuantity         Args: [ptr BattleItem] [var int]                        
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [BattleItem.Tag]       Desc: Get tag of BattleItem
Name: BattleItem.getTag                       Args: [ptr BattleItem] [var int] [RuleItem.Tag]         Desc: Get tag of BattleItem
Name: BattleItem.getTotalWeight               Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmo                       Args: [ptr BattleItem] [var int]                        
Name: BattleItem.isAmmoVisibleForSlot         Args: [ptr BattleItem] [var int] [int]                  Desc: Shows if ammo for a given slot is visible or not. (result slot)
Name: BattleItem.isFuseEnabled                Args: [ptr BattleItem] [var int]                        Desc: check if fuse is triggered (like throw or proxy unit)
Name: BattleItem.isSpecialWeapon              Args: [ptr BattleItem] [var int]                        
Name: BattleItem.setAmmoQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setFuseEnabled               Args: [ptre BattleItem] [int]                           Desc: force set or unset fuse trigger state
Name: BattleItem.setFuseTimer                 Args: [ptre BattleItem] [int]                           Desc: set item fuse timer, -1 mean disable it
Name: BattleItem.setHealQuantity              Args: [ptre BattleItem] [int]                           
Name: BattleItem.setPainKillerQuantity        Args: [ptre BattleItem] [int]                           
Name: BattleItem.setStimulantQuantity         Args: [ptre BattleItem] [int]                           
Name: BattleItem.setTag                       Args: [ptre BattleItem] [BattleItem.Tag] [int]          Desc: Set tag of BattleItem
Name: BattleUnit.Exp.getBravery               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getFiring                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getMelee                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiSkill              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getPsiStrength           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getReactions             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getStrength              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Exp.getThrowing              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.MoveCost.getBaseEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseFlyTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalEnergyPercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseNormalTimePercentArgs: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.getBaseTimePercent  Args: [ptr BattleUnit] [var int]                        Desc: Get inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseFlyTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalEnergyPercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseNormalTimePercentArgs: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.MoveCost.setBaseTimePercent  Args: [ptre BattleUnit] [int]                           Desc: Set inner field of BattleUnit
Name: BattleUnit.Stats.addBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.addTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.getBravery             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getFiring              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getHealth              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getManaPool            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getMelee               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiSkill            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getPsiStrength         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getReactions           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStamina             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getStrength            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getThrowing            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.getTimeUnits           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.Stats.setBravery             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setFiring              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setHealth              Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setManaPool            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setMelee               Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiSkill            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setPsiStrength         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setReactions           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStamina             Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setStrength            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setThrowing            Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.Stats.setTimeUnits           Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is value to add to armor
Name: BattleUnit.addEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is value to add to wounds
Name: BattleUnit.addHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as addHealth but allow negative health values like with Overkill
Name: BattleUnit.addMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.addTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.disableIndicators            Args: [ptre BattleUnit]                                 
Name: BattleUnit.getAggression                Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getArmor                     Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return armor value, second arg is side
Name: BattleUnit.getArmorMax                  Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max armor value, second arg is side
Name: BattleUnit.getDirection                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getEnergy                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getEnergyMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getFaction                   Args: [ptr BattleUnit] [var int]                        Desc: get current faction of unit
Name: BattleUnit.getFatalwounds               Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsMax            Args: [ptr BattleUnit] [var int] [int]                  Desc: first arg return max wounds number, second arg is body part
Name: BattleUnit.getFatalwoundsTotal          Args: [ptr BattleUnit] [var int]                        Desc: sum for every body part
Name: BattleUnit.getFire                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGender                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getGeoscapeSoldier           Args: [ptre BattleUnit] [var ptre GeoscapeSoldier]      
Name: BattleUnit.getGeoscapeSoldier           Args: [ptr BattleUnit] [var ptr GeoscapeSoldier]        
Name: BattleUnit.getHealth                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getHealthMax                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getId                        Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getIntelligence              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory] [ptr RuleItem]
Name: BattleUnit.getInventoryItem             Args: [ptre BattleUnit] [var ptre BattleItem] [ptr RuleInventory]
Name: BattleUnit.getInventoryItem.size        Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getLeftHandWeapon            Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getLeftHandWeapon            Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getLook                      Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getLookVariant               Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMana                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getManaMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getMorale                    Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getMoraleMax                 Args: [ptre BattleUnit] [var int]                       Desc: Get int field of BattleUnit
Name: BattleUnit.getMovementType              Args: [ptr BattleUnit] [var int]                        Desc: get move type of unit
Name: BattleUnit.getOriginalFaction           Args: [ptr BattleUnit] [var int]                        Desc: get original faction of unit
Name: BattleUnit.getOriginalMovementType      Args: [ptr BattleUnit] [var int]                        Desc: get original move type of unit
Name: BattleUnit.getOverKillDamage            Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getX             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getY             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getPosition.getZ             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRank                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getReactionScore             Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRecolor                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getRightHandWeapon           Args: [ptr BattleUnit] [var ptr BattleItem]             
Name: BattleUnit.getRightHandWeapon           Args: [ptre BattleUnit] [var ptre BattleItem]           
Name: BattleUnit.getRuleArmor                 Args: [ptr BattleUnit] [var ptr RuleArmor]              
Name: BattleUnit.getRuleSoldier               Args: [ptr BattleUnit] [var ptr RuleSoldier]            
Name: BattleUnit.getSpawnUnit                 Args: [ptre BattleUnit] [var ptr RuleUnit]              Desc: get type of zombie will be spawn from current unit
Name: BattleUnit.getSpawnUnitFaction          Args: [ptre BattleUnit] [var int]                       Desc: get faction of unit that will spawn
Name: BattleUnit.getSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [var int]                       Desc: get state of instant respawn
Name: BattleUnit.getSpecialItem               Args: [ptre BattleUnit] [var ptre BattleItem] [int]     
Name: BattleUnit.getSpecialItem.size          Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getStatus                    Args: [ptr BattleUnit] [var int]                        Desc: Gets the units current status (STATUS_UNCONSCIOUS, STATUS_DEAD...)
Name: BattleUnit.getStun                      Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getStunMax                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [RuleArmor.Tag]        Desc: Get tag of BattleUnit
Name: BattleUnit.getTag                       Args: [ptr BattleUnit] [var int] [BattleUnit.Tag]       Desc: Get tag of BattleUnit
Name: BattleUnit.getTileShade                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTimeUnits                 Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTimeUnitsMax              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceSpotted         Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getTurnsSinceStunned         Args: [ptr BattleUnit] [var int]                        Desc: Get int field of BattleUnit
Name: BattleUnit.getTurretDirection           Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.getVisibleUnitsCount         Args: [ptre BattleUnit] [var int]                       
Name: BattleUnit.getWalkingPhase              Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.hasNegativeHealthRegen       Args: [ptr BattleUnit] [var int]                        Desc: Is the unit's health regeneration negative (in shock)?
Name: BattleUnit.indicatorsAreEnabled         Args: [ptr BattleUnit] [var int]                        Desc: Checks if indicators are enabled.
Name: BattleUnit.isAiming                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isCollapsing                 Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFearable                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFloating                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isFlying                     Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isKneeled                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isStanding                   Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isVisible                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWalking                    Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.isWoundable                  Args: [ptr BattleUnit] [var int]                        
Name: BattleUnit.makeVisible                  Args: [ptre BattleUnit]                                 
Name: BattleUnit.reduceByBravery              Args: [ptr BattleUnit] [var int]                        Desc: change first arg1 to `(110 - bravery) * arg1 / 100`
Name: BattleUnit.reduceByResistance           Args: [ptr BattleUnit] [var int] [int]                  Desc: change first arg1 to `arg1 * resist[arg2]`
Name: BattleUnit.setArmor                     Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is side, second one is new value of armor
Name: BattleUnit.setEnergy                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setFatalwounds               Args: [ptre BattleUnit] [int] [int]                     Desc: first arg is body part, second one is new value of wounds
Name: BattleUnit.setFire                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealth                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setHealthWithOverkill        Args: [ptre BattleUnit] [int]                           Desc: same as setHealth but allow negative health values like with Overkill
Name: BattleUnit.setMana                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMorale                    Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setMovementType              Args: [ptre BattleUnit] [int]                           Desc: set move type of unit
Name: BattleUnit.setSpawnUnit                 Args: [ptre BattleUnit] [ptr RuleUnit]                  Desc: set type of zombie will be spawn from current unit, it will reset everything to default (hostile & instant)
Name: BattleUnit.setSpawnUnitFaction          Args: [ptre BattleUnit] [int]                           Desc: set faction of unit that will spawn
Name: BattleUnit.setSpawnUnitInstantRespawn   Args: [ptre BattleUnit] [int]                           Desc: set 1 to make unit instantly change to spawn zombie unit, other wise it will transform on death
Name: BattleUnit.setStun                      Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTag                       Args: [ptre BattleUnit] [BattleUnit.Tag] [int]          Desc: Set tag of BattleUnit
Name: BattleUnit.setTimeUnits                 Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceSpotted         Args: [ptre BattleUnit] [int]                           
Name: BattleUnit.setTurnsSinceStunned         Args: [ptre BattleUnit] [int]                           
Name: GeoscapeGame.getRandomState             Args: [ptre GeoscapeGame] [var ptre RandomState]        
Name: GeoscapeGame.getTag                     Args: [ptr GeoscapeGame] [var int] [GeoscapeGame.Tag]   Desc: Get tag of GeoscapeGame
Name: GeoscapeGame.getTime                    Args: [ptr GeoscapeGame] [var ptr Time]                 Desc: Get global time that is Greenwich Mean Time
Name: GeoscapeGame.isResearched               Args: [ptr GeoscapeGame] [var int] [ptr RuleResearch]   
Name: GeoscapeGame.setTag                     Args: [ptre GeoscapeGame] [GeoscapeGame.Tag] [int]      Desc: Set tag of GeoscapeGame
Name: GeoscapeSoldier.Stats.addBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.addTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.getBravery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getFiring         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getHealth         Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getManaPool       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getMelee          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiSkill       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getPsiStrength    Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getReactions      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStamina        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getStrength       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getThrowing       Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.getTimeUnits      Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.Stats.setBravery        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setFiring         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setHealth         Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setManaPool       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setMelee          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiSkill       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setPsiStrength    Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setReactions      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStamina        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setStrength       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setThrowing       Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.Stats.setTimeUnits      Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.getGender               Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getHealthMissing        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getId                   Args: [ptr GeoscapeSoldier] [var int]                   Desc: Get int field of GeoscapeSoldier
Name: GeoscapeSoldier.getLook                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getLookVariant          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getManaMissing          Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRank                 Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.getRuleSoldier          Args: [ptr GeoscapeSoldier] [var ptr RuleSoldier]       
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [RuleSoldier.Tag] Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getTag                  Args: [ptr GeoscapeSoldier] [var int] [GeoscapeSoldier.Tag]Desc: Get tag of GeoscapeSoldier
Name: GeoscapeSoldier.getWoundRecovery        Args: [ptr GeoscapeSoldier] [var int]                   
Name: GeoscapeSoldier.setHealthMissing        Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setManaMissing          Args: [ptre GeoscapeSoldier] [int]                      
Name: GeoscapeSoldier.setTag                  Args: [ptre GeoscapeSoldier] [GeoscapeSoldier.Tag] [int]Desc: Set tag of GeoscapeSoldier
Name: GeoscapeSoldier.setWoundRecovery        Args: [ptre GeoscapeSoldier] [int]                      
Name: RandomState.randomChance                Args: [ptre RandomState] [var int]                      Desc: Change value from range 0-100 to 0-1 based on probability
Name: RandomState.randomRange                 Args: [ptre RandomState] [var int] [int] [int]          Desc: Return random value from defined range
Name: RuleArmor.MoveCost.getBaseEnergyPercent Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseFlyTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalEnergyPercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseNormalTimePercentArgs: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.MoveCost.getBaseTimePercent   Args: [ptr RuleArmor] [var int]                         Desc: Get inner field of RuleArmor
Name: RuleArmor.Stats.getBravery              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getFiring               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getHealth               Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getManaPool             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getMelee                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiSkill             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getPsiStrength          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getReactions            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStamina              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getStrength             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getThrowing             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.Stats.getTimeUnits            Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getArmor                      Args: [ptr RuleArmor] [var int] [int]                   
Name: RuleArmor.getConstantAnimation          Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDeathFrames                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawBubbles                Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getDrawingRoutine             Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getPersonalLight              Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getSize                       Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getTag                        Args: [ptr RuleArmor] [var int] [RuleArmor.Tag]         Desc: Get tag of RuleArmor
Name: RuleArmor.getType                       Args: [ptr RuleArmor] [var text]                        
Name: RuleArmor.getVisibilityAtDark           Args: [ptr RuleArmor] [var int]                         
Name: RuleArmor.getVisibilityAtDay            Args: [ptr RuleArmor] [var int]                         
Name: RuleDamageType.getArmorEffectiveness    Args: [ptr RuleDamageType] [var int]                    Desc: how effective is a unit's armor against this damage, % (value multiplied by 100 compared to ruleset value)
Name: RuleDamageType.getDamageToArmor         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToArmorPre      Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToEnergy        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToHealth        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToItem          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMana          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToMorale        Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToStun          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTile          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToTime          Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getDamageToWound         Args: [ptr RuleDamageType] [var int] [int]              Desc: calculated damage value multiplied by the corresponding modifier
Name: RuleDamageType.getRandomDamage          Args: [ptr RuleDamageType] [var int] [int] [ptre RandomState]Desc: calculated damage value (based on weapon's power)
Name: RuleDamageType.getRandomType            Args: [ptr RuleDamageType] [var int]                    Desc: how to calculate randomized weapon damage from the weapon's power
Name: RuleDamageType.getResistType            Args: [ptr RuleDamageType] [var int]                    Desc: which damage resistance type is used for damage reduction
Name: RuleDamageType.isAreaOfEffect           Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type can affect multiple targets
Name: RuleDamageType.isDirect                 Args: [ptr RuleDamageType] [var int]                    Desc: if this damage type affects only one target
Name: RuleInventory.getId                     Args: [ptr RuleInventory] [var text]                    
Name: RuleInventory.getMoveToCost             Args: [ptr RuleInventory] [var int] [ptr RuleInventory] Desc: Cost of moving item from slot in first arg to slot from last arg
Name: RuleInventory.getType                   Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isLeftHand                Args: [ptr RuleInventory] [var int]                     
Name: RuleInventory.isRightHand               Args: [ptr RuleInventory] [var int]                     
Name: RuleItem.getAccuracyAimed               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyAuto                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMelee               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyMind                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyPanic               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracySnap                Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyThrow               Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getAccuracyUse                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getArmorValue                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBattleType                  Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getBigSpriteIndex              Args: [ptr RuleItem] [var int]                          Desc: Gets the index of the BIGOBS sprite used to display this item (without scripting).
Name: RuleItem.getClipSize                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getDamageType                  Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: primary damage type
Name: RuleItem.getInvHeight                   Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory height.
Name: RuleItem.getInvWidth                    Args: [ptr RuleItem] [var int]                          Desc: Gets an items inventory width.
Name: RuleItem.getMaxHealQuantity             Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of heal charges.
Name: RuleItem.getMaxPainKillerQuantity       Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of painkiller charges.
Name: RuleItem.getMaxStimulantQuantity        Args: [ptr RuleItem] [var int]                          Desc: Gets the default number of stim charges.
Name: RuleItem.getMediKitType                 Args: [ptr RuleItem] [var int]                          Desc: Gets the the medikit type. WARNING: BMT_NORMAL if not a medikit.
Name: RuleItem.getMeleeDamageType             Args: [ptr RuleItem] [var ptr RuleDamageType]           Desc: secondary damage type (gunbutt)
Name: RuleItem.getMeleePower                  Args: [ptr RuleItem] [var int]                          Desc: secondary power (gunbutt), before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getPower                       Args: [ptr RuleItem] [var int]                          Desc: primary power, before applying unit bonuses, random rolls or other modifiers
Name: RuleItem.getTag                         Args: [ptr RuleItem] [var int] [RuleItem.Tag]           Desc: Get tag of RuleItem
Name: RuleItem.getType                        Args: [ptr RuleItem] [var text]                         
Name: RuleItem.getWaypoints                   Args: [ptr RuleItem] [var int]                          
Name: RuleItem.getWeight                      Args: [ptr RuleItem] [var int]                          
Name: RuleItem.hasCategory                    Args: [ptr RuleItem] [var int] [text]                   
Name: RuleItem.isBlockingBothHands            Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isSingleTarget                 Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isTwoHanded                    Args: [ptr RuleItem] [var int]                          
Name: RuleItem.isWaterOnly                    Args: [ptr RuleItem] [var int]                          
Name: RuleMod.getInterfaceElementColor        Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element. -1 on error. (color interface element)
Name: RuleMod.getInterfaceElementColor2       Args: [ptr RuleMod] [var int] [text] [text]             Desc: Gets the color of a specific interface element.  -1 on error. (color interface element)
Name: RuleMod.getMaxDarknessToSeeUnits        Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getMaxViewDistance              Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getNamedSprite                  Args: [ptr RuleMod] [var ptr Sprite] [text]             Desc: Get a sprite identified by a string. (sprite spriteName)
Name: RuleMod.getRuleArmor                    Args: [ptr RuleMod] [var ptr RuleArmor] [text]          
Name: RuleMod.getRuleInventory                Args: [ptr RuleMod] [var ptr RuleInventory] [text]      
Name: RuleMod.getRuleInventoryBackpack        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryBelt            Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryGround          Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryLeftHand        Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleInventoryRightHand       Args: [ptr RuleMod] [var ptr RuleInventory]             
Name: RuleMod.getRuleItem                     Args: [ptr RuleMod] [var ptr RuleItem] [text]           
Name: RuleMod.getRuleResearch                 Args: [ptr RuleMod] [var ptr RuleResearch] [text]       
Name: RuleMod.getRuleSkill                    Args: [ptr RuleMod] [var ptr RuleSkill] [text]          
Name: RuleMod.getRuleSoldier                  Args: [ptr RuleMod] [var ptr RuleSoldier] [text]        
Name: RuleMod.getRuleUnit                     Args: [ptr RuleMod] [var ptr RuleUnit] [text]           
Name: RuleMod.getSmokeReduction               Args: [ptr RuleMod] [var int]                           
Name: RuleMod.getSoundOffsetBattle            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSoundOffsetGeo               Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod sound index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteFromSet                Args: [ptr RuleMod] [var ptr Sprite] [text] [int]       Desc: Gets a sprite identified by set name and index from the appropriate store. (sprite set index
Name: RuleMod.getSpriteOffsetBasebits         Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetBigobs           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetFloorob          Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHandob           Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetHit              Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getSpriteOffsetSmoke            Args: [ptr RuleMod] [var int] [int]                     Desc: convert mod surface index in first argument to runtime index in given set, second argument is mod id
Name: RuleMod.getTag                          Args: [ptr RuleMod] [var int] [RuleMod.Tag]             Desc: Get tag of RuleMod
Name: RuleMod.setTag                          Args: [ptre RuleMod] [RuleMod.Tag] [int]                Desc: Set tag of RuleMod
Name: RuleResearch.getCost                    Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getPoints                  Args: [ptr RuleResearch] [var int]                      
Name: RuleResearch.getTag                     Args: [ptr RuleResearch] [var int] [RuleResearch.Tag]   Desc: Get tag of RuleResearch
Name: RuleSkill.getTag                        Args: [ptr RuleSkill] [var int] [RuleSkill.Tag]         Desc: Get tag of RuleSkill
Name: RuleSkill.getType                       Args: [ptr RuleSkill] [var text]                        
Name: RuleSkill.setTag                        Args: [ptre RuleSkill] [RuleSkill.Tag] [int]            Desc: Set tag of RuleSkill
Name: RuleSoldier.StatsCap.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsCap.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMax.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getBravery         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getFiring          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getHealth          Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getManaPool        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getMelee           Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiSkill        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getPsiStrength     Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getReactions       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStamina         Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getStrength        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getThrowing        Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.StatsMin.getTimeUnits       Args: [ptr RuleSoldier] [var int]                       
Name: RuleSoldier.getTag                      Args: [ptr RuleSoldier] [var int] [RuleSoldier.Tag]     Desc: Get tag of RuleSoldier
Name: RuleSoldier.getType                     Args: [ptr RuleSkill] [var text]                        
Name: RuleSoldierBonus.Stats.getBravery       Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getFiring        Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getHealth        Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getManaPool      Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getMelee         Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getPsiSkill      Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getPsiStrength   Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getReactions     Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getStamina       Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getStrength      Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getThrowing      Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.Stats.getTimeUnits     Args: [ptr RuleSoldierBonus] [var int]                  
Name: RuleSoldierBonus.getTag                 Args: [ptr RuleSoldierBonus] [var int] [RuleSoldierBonus.Tag]Desc: Get tag of RuleSoldierBonus
Name: RuleUnit.getType                        Args: [ptr RuleUnit] [var text]                         
Name: Sprite.getHeight                        Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (height)
Name: Sprite.getWidth                         Args: [ptr Sprite] [var int]                            Desc: Get's the width of the sprite. (width)
Name: Tile.getDistanceTile                    Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getDistanceVoxel                   Args: [ptr Tile] [var int] [ptr Tile]                   
Name: Tile.getFire                            Args: [ptr Tile] [var int]                              
Name: Tile.getFloorSpecialTileType            Args: [ptr Tile] [var int]                              
Name: Tile.getObjectSpecialTileType           Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getX                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getY                   Args: [ptr Tile] [var int]                              
Name: Tile.getPosition.getZ                   Args: [ptr Tile] [var int]                              
Name: Tile.getShade                           Args: [ptr Tile] [var int]                              
Name: Tile.getSmoke                           Args: [ptr Tile] [var int]                              
Name: Tile.getUnit                            Args: [ptr Tile] [var ptr BattleUnit]                   
Name: Time.getDay                             Args: [ptr Time] [var int]                              
Name: Time.getDaysPastEpoch                   Args: [ptr Time] [var int]                              Desc: Days past 1970-01-01
Name: Time.getHour                            Args: [ptr Time] [var int]                              
Name: Time.getMinute                          Args: [ptr Time] [var int]                              
Name: Time.getMonth                           Args: [ptr Time] [var int]                              
Name: Time.getSecond                          Args: [ptr Time] [var int]                              
Name: Time.getSecondsPastMidnight             Args: [ptr Time] [var int]                              Desc: Seconds past 00:00
Name: Time.getYear                            Args: [ptr Time] [var int]                             
